rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check user role
    function hasRole(role) {
      return isSignedIn() && getUserData().role == role;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || hasRole('admin');
      allow delete: if hasRole('admin');
    }
    
    // Products collection
    match /products/{productId} {
      allow read: if true; // Anyone can browse products
      allow create: if isSignedIn() && (hasRole('vendor') || hasRole('admin'));
      allow update: if isSignedIn() && 
                      (resource.data.vendorId == request.auth.uid || hasRole('admin'));
      allow delete: if isSignedIn() && 
                      (resource.data.vendorId == request.auth.uid || hasRole('admin'));
      
      // Product reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && 
                                 resource.data.userId == request.auth.uid;
      }
    }
    
    // Orders collection
    match /orders/{orderId} {
      allow read: if isSignedIn() && 
                    (request.auth.uid == resource.data.customerId || 
                     request.auth.uid == resource.data.vendorId ||
                     hasRole('admin'));
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
                      (request.auth.uid == resource.data.vendorId || 
                       hasRole('admin'));
      allow delete: if hasRole('admin');
    }
  }
}